# Application Configuration
spring.application.name=payment-service
server.port=8084

# Spring Cloud Config - Disable for standalone mode
spring.cloud.config.enabled=false
spring.cloud.config.import-check.enabled=false

# Eureka Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.instance.prefer-ip-address=true

# Database Configuration - Neon PostgreSQL
spring.datasource.url=jdbc:postgresql://ep-odd-bird-ad95xpzj-pooler.c-2.us-east-1.aws.neon.tech:5432/neondb?sslmode=require&channelBinding=require&prepareThreshold=0&preparedStatementCacheQueries=0
spring.datasource.username=neondb_owner
spring.datasource.password=npg_lqz4BRb7umgG
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP - PRODUCTION OPTIMIZED FOR NEON
spring.datasource.hikari.pool-name=NeonHikariPool-PaymentService
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.max-lifetime=240000
spring.datasource.hikari.idle-timeout=180000
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.keepalive-time=120000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.data-source-properties.socketTimeout=30
spring.datasource.hikari.data-source-properties.tcpKeepAlive=true

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# PayOS Configuration
payos.client-id=60e4307b-eb21-4dc6-bcaf-e9d31cfb74b7
payos.api-key=c2d99460-a5e8-45e3-8b1d-afcc01f098dd
payos.checksum-key=29294b003b6b122f9790691977e04f25016f34c4c5e5778af41ff17a7428cfa4
payos.parkin-domain=http://localhost:8000
payos.payos-domain=https://api-merchant.payos.vn
payos.return-url=http://localhost:8084/payment/return
payos.cancel-url=http://localhost:8084/payment/cancel

# VietQR Configuration
payos.vietqr.bankID=970422
payos.vietqr.accountNo=VQRQAEPDT8663
payos.vietqr.template=compact2

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=payment-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.payment_service.event

# API Documentation
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Logging
logging.level.com.example.payment_service=DEBUG
logging.level.vn.payos=DEBUG
